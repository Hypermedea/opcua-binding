package org.hypermedea.opcua;

import org.eclipse.milo.opcua.sdk.client.OpcUaClient;
import org.eclipse.milo.opcua.sdk.client.api.config.OpcUaClientConfig;
import org.eclipse.milo.opcua.sdk.client.api.config.OpcUaClientConfigBuilder;
import org.eclipse.milo.opcua.stack.core.UaException;
import org.eclipse.milo.opcua.stack.core.types.builtin.LocalizedText;
import org.eclipse.milo.opcua.stack.core.types.structured.EndpointDescription;
import org.hypermedea.op.BaseProtocolBinding;
import org.hypermedea.op.Operation;

import java.util.*;
import java.util.concurrent.ExecutionException;
import java.util.function.Function;

import static org.eclipse.milo.opcua.sdk.client.OpcUaClient.create;

/**
 * <p>
 *   OPC UA binding for W3C Web of Things (WoT) forms. The OPC UA binding expects forms with target URIs having
 *   the {@code opc.tcp} scheme.
 * </p>
 * <p>
 *   The current implementation only supports reading and writing OPC UA nodes of type Variable,
 *   interpreted as {@code readProperty} and {@code writeProperty} operations. See {@link OPCUA} for a
 *   documentation of allowed terms in WoT forms targeting OPC UA.
 * </p>
 */
public class OpcUaBinding extends BaseProtocolBinding {

    public static final String OPC_UA_PROTOCOL = "OPC UA";

    public static final String OPC_UA_SCHEME = "opc.tcp";

    /**
     * Clients used in {@link Operation} generated by calls to {@link #bind(String, Map)}.
     * By reusing the same client, several operations targeting the same OPC UA server
     * will require only a single connection.
     */
    private Map<String, OpcUaClient> connections = new HashMap<>();

    @Override
    public String getProtocol() {
        return OPC_UA_PROTOCOL;
    }

    @Override
    public Collection<String> getSupportedSchemes() {
        Set<String> singleton = new HashSet<>();
        singleton.add(OPC_UA_SCHEME);

        return singleton;
    }

    @Override
    protected Operation bindGet(String targetURI, Map<String, Object> formFields) {
        return new ReadOperation(targetURI, formFields, getClient(targetURI));
    }

    @Override
    protected Operation bindPut(String targetURI, Map<String, Object> formFields) {
        return new WriteOperation(targetURI, formFields, getClient(targetURI));
    }

    /**
     * <p>
     *     The {@code OpcUaBinding} object maintains a list of open connections, such that
     *     whenever it binds a form to a specific OPC UA operation, it first look up its list of open connections.
     *     If the OPC UA endpoint given in the input form is already known, an existing OPC UA client
     *     (whose connection is supposed to be active) is used for the operation. If the endpoint
     *     is not known yet, a new client is created and connection to the server is immediately attempted.
     *     If connection is established, the client is added to the list of open connections and the newly
     *     created client is used for the operation. If the client cannot connect, it is assumed the form
     *     contains invalid information (e.g. incorrect endpoint URI).
     * </p>
     *
     * @param endpointUri an endpoint URI targeting some OPC UA server
     * @return a client connected to the targeted OPC UA server
     */
    private OpcUaClient getClient(String endpointUri) {
        // TODO check client is still connected
        if (connections.containsKey(endpointUri)) return connections.get(endpointUri);

        Function<List<EndpointDescription>, Optional<EndpointDescription>> sel = eps -> eps.stream().findFirst();

        Function<OpcUaClientConfigBuilder, OpcUaClientConfig> build = b ->
                b.setApplicationName(LocalizedText.english("Hypermedea OPC UA protocol binding"))
                 .setApplicationUri("https://hypermedea.github.io/#this")
                 .build();

        try {
            OpcUaClient client = create(endpointUri, sel, build);
            client.connect().get(); // blocking operation

            connections.put(endpointUri, client);

            return client;
        } catch (UaException e) {
            throw new RuntimeException("OPC UA client cannot be created based on form information", e);
        } catch (InterruptedException e) {
            // TODO retry instead
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            // TODO log and retry instead
            throw new RuntimeException(e);
        }
    }

}
