package org.hypermedea.opcua;

import ch.unisg.ics.interactions.wot.td.affordances.Form;
import ch.unisg.ics.interactions.wot.td.bindings.Operation;
import ch.unisg.ics.interactions.wot.td.bindings.ProtocolBinding;
import ch.unisg.ics.interactions.wot.td.bindings.ProtocolBindings;
import ch.unisg.ics.interactions.wot.td.vocabularies.TD;
import org.eclipse.milo.opcua.sdk.client.OpcUaClient;
import org.eclipse.milo.opcua.sdk.client.api.config.OpcUaClientConfig;
import org.eclipse.milo.opcua.sdk.client.api.config.OpcUaClientConfigBuilder;
import org.eclipse.milo.opcua.stack.core.UaException;
import org.eclipse.milo.opcua.stack.core.types.builtin.LocalizedText;
import org.eclipse.milo.opcua.stack.core.types.structured.EndpointDescription;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.ExecutionException;
import java.util.function.Function;

import static org.eclipse.milo.opcua.sdk.client.OpcUaClient.create;

public class OpcUaBinding implements ProtocolBinding {

    public static final String OPCUA_PROTOCOL = "OPC UA";

    public static final String OPCUA_SCHEME = "opc.tcp";

    private static OpcUaBinding singleton = new OpcUaBinding();

    static {
        // FIXME not called as long as OpcUaBinding isn't mentioned in code
        // use reflection instead? Class.forName(...)
        ProtocolBindings.registerBinding(OPCUA_SCHEME, singleton);
    }

    /**
     * Client used in {@link Operation} generated by last call to {@link #bind(Form, String)}.
     * By reusing the same client, several operations targeting the same OPC UA server
     * will require only a single connection.
     */
    private OpcUaClient lastClientUsed;

    private OpcUaBinding() {}

    @Override
    public String getProtocol() {
        return OPCUA_PROTOCOL;
    }

    @Override
    public Optional<String> getDefaultMethod(String operationType) {
        return Optional.empty();
    }

    @Override
    public Optional<String> getDefaultSubProtocol(String operationType) {
        return Optional.empty();
    }

    @Override
    public Operation bind(Form form, String operationType) {
        try {
            URI uri = new URI(form.getTarget());
            // TODO throw error instead
            if (!uri.getScheme().equals(OPCUA_SCHEME)) return null;

            OpcUaClient c = createClient(form.getTarget());
            if (!lastClientUsed.equals(c)) lastClientUsed = c;

            switch (operationType) {
                case TD.readProperty: return new ReadOperation(form, c);
                case TD.writeProperty: return new WriteOperation(form, c);

                default: return null; // TODO throw error?
            }
        } catch (URISyntaxException e) {
            // TODO throw error
            return null;
        }
    }

    private OpcUaClient createClient(String endpointUri) {
        Function<List<EndpointDescription>, Optional<EndpointDescription>> sel = eps -> eps.stream().findFirst();

        Function<OpcUaClientConfigBuilder, OpcUaClientConfig> build = b ->
                b.setApplicationName(LocalizedText.english("Hypermedea OPC UA protocol binding"))
                 .setApplicationUri("https://hypermedea.github.io/#this")
                 .build();

        OpcUaClient client = null;

        try {
            client = create(endpointUri, sel, build);
        } catch (UaException e) {
            // TODO throw exception about form instead (erroneous information)
            throw new RuntimeException(e);
        }

        try {
            if (client != null) client.connect().get(); // blocking operation
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }

        return client;
    }

}
